\documentclass[runningheads]{llncs}
%
\usepackage[T1]{fontenc}
\usepackage{xcolor}
\usepackage{colortbl}
\usepackage{booktabs}
\usepackage{graphicx}

%
% If you use the hyperref package, please uncomment the following two lines
% to display URLs in blue roman font according to Springer's eBook style:
%\usepackage{color}
%\renewcommand\UrlFont{\color{blue}\rmfamily}
%
\begin{document}
%
\title{Self-loops in social networks: behavior of eigenvector centrality\thanks{This work is supported by the Ministerio espa\~{n}ol de Econom\'{\i}a y
Competitividad (Spanish Ministry of Competitivity and Economy) under project
PID2020-115570GB-C22 (DemocratAI::UGR).}}

\author{JJ Merelo\inst{1}\orcidID{0000-0002-1385-9741}}
%
\authorrunning{JJ Merelo}
% First names are abbreviated in the running head.
% If there are more than two authors, 'et al.' is used.
%
\institute{Department of Computer Engineering, Automatics and Robotics and CITIC University of Granada, Granada, Spain
\email{jmerelo@ugr.es}}
%
\maketitle              % typeset the header of the contribution
%
\begin{abstract}

Many complex networks, including social networks, include links from one actor to itself; often, these links are dropped to perform analysis of centrality measures. Some centrality measures, like eigenvector centrality, can work with these self-loops, however. In this paper, we will be looking at the difference of the results in the analysis of a social network using eigenvector centrality when these self loops are considered, and what additional insights we can gather from this inclusion, including possible recommendations for the incorporation of these self-loops in more general social network analysis.
\keywords{Complex networks  \and Social  networks \and Graph Theory}
\end{abstract}
%

Many social networks include self-loops; matrimonial networks, for instance, may include marriages between members of the same family \cite{colleganza}; commuting networks will include trips within the same city or state, and commercial networks will include, in the case of cartels or big corporations, financial transactions between different divisions of the same company. When analysis is performed on these networks, however, most centrality measures cannot work with them, so in most cases they are dropped. Even in the case of measurements that work on the connection matrix, like eigenvector centrality, self-loops are dropped mainly to work on an uniform set of data.

These intra-links can, however, give us better insights on the dynamics of a social network, and should probably be taken into account. So far, however, there has been little analysis on what is the actual effect of intra-links on the eigenvector centrality \cite{BONACICH2007555} in social networks. This paper will try, using a well-chosen example, what is that effect and how it will help better understand social systems.

We will be using the marital network of the Republic of Venice, data published by Puga and Treffler for their paper \cite{colleganza}. This network includes marriages where the groom is a noble, registered with the Avvogaria del Comune of the republic. From this dataset, those that included a non-noble member have been eliminated. The dataset is normalized to include only the family bride and groom belong to.
This dataset has been chosen because it includes many intra-family marriages; a ranking of the families according to the number of marriages is shown in Table \ref{tab:top:ev} (left).
%
<<setup, echo=F,message=F>>=
library(igraph)
library(knitr)
library(stringr)
library(kableExtra)
tablify <- function( graph, column ) {
  m.table <- data.frame( Family=V(graph)$name, degree=vertex_attr(graph,column) )
  names(m.table)[names(m.table) == "degree"] <- column
  return( m.table[ order(m.table[[column]],decreasing = T),] )
}


load("data/venice-marriages.Rda")
marriages <- marriages.raw[ marriages.raw$wife_familyname_std != '',] # Eliminates those that are not noble

# Use self-loops
all.marriages <- marriages                                    # Keep marriages with intra-family ties
all.marriages.sn <- graph.data.frame(data.frame(all.marriages$husband_familyname_std,all.marriages$wife_familyname_std),directed=F)
V(all.marriages.sn)$eigen <-  unname(unlist(eigen_centrality(all.marriages.sn)$vector))
all.m.eigen <- tablify( all.marriages.sn, "eigen")
top.ev.all.eigen <- all.m.eigen %>% head(.,10)

# Eliminate self-loops
marriages <- marriages[ marriages$husband_familyname_std != marriages$wife_familyname_std,]
marriages.sn <- graph.data.frame(data.frame(marriages$husband_familyname_std,marriages$wife_familyname_std),directed=F)
V(marriages.sn)$eigen <-  unname(unlist(eigen_centrality(marriages.sn)$vector))
m.eigen <- tablify( marriages.sn, "eigen")
top.ev.eigen <- m.eigen %>% head(.,10)

library(dplyr)
library(tidyr)
library(tibble)
library(ggplot2)
library(ggthemes)

marriages.self <- marriages.raw[ marriages.raw$husband_familyname_std == marriages.raw$wife_familyname_std,]
sorted.marriages.self <- marriages.self %>% count(wife_familyname_std, sort=T)
intra.marriages <- unique(marriages.self$wife_familyname_std)

top.intra.marriages <-  sorted.marriages.self %>% head(.,10)

tabled.top.eigen <- data.frame(Family.Intra = top.intra.marriages$wife_familyname_std, Marriages=top.intra.marriages$n, Family = top.ev.eigen$Family, EV = top.ev.eigen$eigen, Family.Self=top.ev.all.eigen$Family, EV.self = top.ev.all.eigen$eigen)
kable(tabled.top.eigen,
      col.names=c("Family", "#Intra-family matrimonies", "Family", "EV","Family","EV + self-loops" ),
      caption="Ranking of families according to number of intra-family matrimonies (left) and EV, with (right) or without (center) self-loops. \\protect\\label{tab:top:ev}",
      row.names = F, booktabs = T) %>% kable_styling(latex_options = c("striped")) %>% column_spec(2, border_right=T) %>% column_spec(3, border_left = T ) %>% column_spec(4, border_right=T) %>% column_spec(5, border_left = T )
@

This dataset has been transformed into a graph by eliminating self-loops (as usual), or leaving them; eigenvector centrality has then been computed for the two resulting graphs. A ranking of the top families according to their EV centrality is shown in Table \ref{tab:top:ev} (center and rightmost columns).

Looking at the leftmost and center group of columns, we can wee that there seems to be certain correlation between the number of intra-family marriages and the EV centrality, even if we do not include it in the computation. Six out of then families are the same, and the first three: Contarini, Morosini, Corner also appear in the same order. This might indicate either a common cause (size of the family, for instance) or a cause-effect. Including self-loops in the computation we see that there are small, but significant, variations: The Dolfins and Giustinians change their order in the ranking, plus the Loredan family is dropped and substituted by the Pisani family\footnote{The Pisani family is certainly more "central" than the Loredan, at least looking at the number of nobles in important offices}. We can also see that the difference between the first and second has doubled, and that, in general, the value of the normalized EV centrality has also decreased.

<<charts, echo=F, fig.show="hold", out.width="50%",message=F, fig.cap="(Left) EV centrality considering self-loops (x axis) or not (y axis). The size of the plot and color signal the number of intra-family marriages. (Right) Number of intra-family marriages vs. percent increment of EV when self-loops are not computed. \\protect\\label{fig:plots}">>=
all.names <- unique( c( marriages.raw$wife_familyname_std, marriages.raw$husband_familyname_std))
all.marriages <- marriages.raw %>% select(husband_familyname_std,wife_familyname_std) %>% rowid_to_column() %>% pivot_longer(-rowid) %>% group_by(value) %>% summarise(n = n_distinct(rowid)) %>% arrange(desc(n))
marriages.table <- left_join(all.marriages,sorted.marriages.self,by=c("value" = "wife_familyname_std"))
marriages.table$intra.marriages.rate <- marriages.table$n.y / marriages.table$n.x

marriages.summary <- data.frame(family=intra.marriages, EV.with.self=sapply( intra.marriages, function(x) V(all.marriages.sn)[[x]]$eigen ), EV.no.self=sapply( intra.marriages, function(x) V(marriages.sn)[[x]]$eigen ), intra.marriages=sapply( intra.marriages, function(x) sorted.marriages.self[sorted.marriages.self$wife_familyname_std ==x,]$n ))
ggplot(marriages.summary, aes(x=EV.with.self,y=EV.no.self, color=intra.marriages, size=intra.marriages))+geom_point()+geom_abline(intercept=0,slope=1,linetype="dashed",color="red")+scale_x_log10()+scale_y_log10()
marriages.summary$diff <- (marriages.summary$EV.no.self - marriages.summary$EV.with.self)/marriages.summary$EV.no.self
ggplot(marriages.summary, aes(x=intra.marriages,y=diff))+geom_point()+theme_fivethirtyeight()
@

This is why in Figure \ref{fig:plots} we have analyzed the differences between the EV values with or without loops for every node. The left hand side of that Figure plots the values with self-loops vs. those without in a log scale, showing all values over the $x=y$ line; all values are increased. Looking at the colors and sizes, we can see that the smaller the size (number of marriages), the bigger the increase in value; that is, more intra-family marriages make the inclusion of self-loops decrease \emph{less} the EV centrality. However, this is due in this case to the fact that what is actually increased is the difference between the family with EV 1 (the Contarinis) and the rest, so we can look at this result from the other side: the presence of a family with a high value in the diagonal of the connection matrix increases its EV centrality much more than that of the rest of the nodes/families. The right hand side of Figure \ref{fig:plots} certainly shows that there is a relationship between the number of intra-family weddings and the change, and that this relationship is systematic. At any rate, what this chart reveals is that, as should be expected, the value of intra-family marriages/self-loops in the computation of EV centrality certainly gives us better insights on the dynamics of the social network.

We can conclude from this that, in general, the inclusion of self-loops in other centrality measures, such as page-rank or betweenness centrality, would help us understand better social networks where those measurements explain better its dynamics; however, this will need a modification of the algorithms used to compute them, which is left as a future line of work. In order to be comprehensive, too, it would be interesting to see the relationship between the slope of the model shown in Figure \ref{fig:charts} and the relationship between the number of self-loops for all actors involved. Finally, investigating other social networks with the same characteristics would help us generalize these results and thus recommend to \emph{never} eliminate self-loops in the analysis of social networks where they exist.

\bibliographystyle{splncs04}
\bibliography{venice}

\end{document}
