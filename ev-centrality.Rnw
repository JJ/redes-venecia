\documentclass[runningheads]{llncs}
%
\usepackage[T1]{fontenc}
\usepackage{xcolor}
\usepackage{colortbl}
\usepackage{booktabs}
\usepackage{graphicx}

%
% If you use the hyperref package, please uncomment the following two lines
% to display URLs in blue roman font according to Springer's eBook style:
%\usepackage{color}
%\renewcommand\UrlFont{\color{blue}\rmfamily}
%
\begin{document}
%
\title{Self-loops in social networks: behavior of eigenvector centrality}

\author{JJ Merelo\inst{1}\orcidID{0000-0002-1385-9741} and M. Cristina Molinari\inst{2}\orcidID{0000-0002-6380-6795}}
%
\authorrunning{Merelo, Molinari}

\institute{Department of Computer Engineering, Automatics and Robotics and CITIC University of Granada, Granada, Spain
\email{jmerelo@ugr.es} \and
Dipartimento di Economia, Ca' Foscari University of Venice, Venice, ITALY
}
%
\maketitle
%
\begin{abstract}
Centrality measures are an essential tool in understanding complex networks, since they give researcher insights on the role the different nodes/actors play in them. Among them, eigenvector centrality is a principled approach to these measures, using a mathematical operation on the connection matrix. This connection  matrix includes connections from an actor to itself (the diagonal); however, as it is the case with most centrality measures, this fact is seldom used in social studies to compute the standing or influence of one node over others. In this paper we will analyze the difference in EV centrality with or without these self connections or self-loops and how the change depends on the actual number of these self-loops or the weight of these self-connections. Finally, we will characterize in which cases, if any, it is effective to drop self-loops and what kind of information it will give us on the nature and dynamics of the network.

\keywords{Complex networks  \and Social  networks \and Graph Theory \and Eigenvector centrality}
\end{abstract}
%

\section{Introduction}

Eigenvector centrality \cite{doi:10.1080/0022250X.1972.9989806} measures how an actor in a network or graph influences other actors by computing the eigenvalues of the adjacency or connectivity matrix, that has as components the weight of the connection of every agent to all the others, including itself. It is a centrality measure because, along with other such measures (such as betweenness or degree centrality \cite{Rodrigues2019}), it is a micro-level assessment of the power or influence of a node within a network through the analysis of its connections. It has been used extensively in social network analysis \cite{gooddoge,DBLP:journals/corr/abs-1108-0261,merelo2007bce}; but also in other fields, such as biology \cite{horstmeyer2020predicting}, economics \cite{colleganza}, or even in the analysis of the spread of opinions in internet forums during the COVID-19 pandemic \cite{computation11050103}.

In its widespread use for the computation of the value for a single node it is not very different from other centrality measures; however, unlike them, it considers the whole network \cite{BONACICH2007555} taking into account all weights (including negative ones); and, more importantly for the purposes of this paper, all weights" include the connections of a node to itself, or self-loops.

As a matter of fact, many complex networks, including social networks, include links from one actor/agent to itself; we can find them in commuting networks \cite{he2020demarcating}, where self-loops would indicate trips that start and end in the same city, county or state; in family networks \cite{he2020demarcating}, with self-loops indicating marriage between members of the same (extended) family; opinion networks \cite{computation11050103}, where they would indicate interaction among members of the same group; sport teams transfer networks \cite{gursakal2020comparison}, indicating transfers between teams in the same country; when freight traffic networks \cite{iyengar2012power} are analyzed at a regional level, self-loops would represent shipments that start and end in different parts of the region; commercial networks \cite{colleganza} where self-loops indicate a contract between members of the same family, or even biological networks \cite{horstmeyer2020predicting}, where self-loops could indicate auto-trophic (members of a species feeding on other members) or auto-catalytic (reactive agents catalyzing reactions where they participate).

The main issue and the one we are trying to address in this paper, is that when centrality analysis is performed on these networks, most centrality measures cannot work with self-loops; thus, in most cases,  they are dropped \cite{computation11050103,colleganza,gooddoge}. Even when a specific measure can include self-loops, like the aforementioned eigenvector centrality that works on the connection matrix,  self-loops are usually dropped mainly to work on an uniform set of data, that is, not use two different connection matrices with diagonal values (for EV centrality) and other without (for other measures).

In the cases where self-loops do not have a clear interpretation (or at least a common interpretation with the rest of the connections) there are good reasons to work that way: betweenness centrality \cite{freeman1977set}, for instance, models how one node is needed to transmit information to other parts of the network; how often it transmits information to itself cannot easily be accommodated within this framework, and it can be argued that it could be simply ignored when computing the geodesics from which this measure is computed. That is not the case for EV centrality, which does in fact use self-loops to compute the eigenvalues that are presented as the EV centrality measure. And these intra-links can, however, give us better insights on the dynamics of a social network, and should probably be taken into account. So far, however, there has been little analysis on what is the actual effect of considering these intra-links for computing the eigenvector centrality \cite{BONACICH2007555} in social networks. This paper will try, using well-chosen examples, what is that effect and how it could help to better understand social systems.

The main research question that we ask, then, is if self-loops should be included, when available, in the computation of eigenvector centrality. As an accessory question, we try to investigate what would be the effect of doing so in EV centrality measurements, and how it affects the value and the ranking of nodes in the corresponding network.

The rest of the paper is organized as follows: next we will be describing the state of the art, to proceed to describe the datasets and the experiments performed in Section \ref{sec:exp}. We will then discuss the results and conclude with our conclusions and future lines of work.

\section{A brief literature survey}

The main motivation behind this paper is to shed a bit of light on the use of self-loops in social network analysis, mainly because it has been used so rarely in the past. Some papers acknowledge its importance in the propagation of information in social networks \cite{9688320}, with self-loops representing simply re-posts of some content previously created by the same person; other papers, however \cite{computation11050103} dealing with the same subject, explicitly do not use them, thus missing a good amount of the dynamics created by these self loops. In other opinion formation papers \cite{salehi2014empathetic} self-loops represent the amount of attention a person pays to its own opinion as opposed to others. In general, even theoretical models of the spread of information in social networks \cite{CHIERICHETTI20112602} include self-loops.

In general we can say that while self-loops are sometimes acknowledged and used in social network \emph{models}, they are dropped when making centrality analysis of complex or social networks. This why we have made it the main focus of this paper.

\section{Experiments}
\label{sec:exp}

We will be using two datasets to perform the experiments. The first one is the Venetian matrimonial dataset \cite{colleganza}, a social network of the noble families of the Republic of Venice from the XIV to the XIX century\footnote{Some marriages are not dated, but we can assume they took place in the same range of years.}; the second is a dataset of freight traffic among the states of the United States of America extracted from the government data portal \cite{southworth2018freight}. These will be examined in turn in the next two subsections.

\subsection{Analyzing the Venetian matrimonial dataset}

<<setup, echo=F,message=F>>=
library(igraph)
library(knitr)
library(stringr)
library(kableExtra)

# Create a table with a certain vertex attribute
tablify <- function( graph, column, column.name ) {
  m.table <- data.frame( V1=V(graph)$name, V2=vertex_attr(graph,column) )
  names(m.table) <- c(column.name,column)
  return( m.table[ order(m.table[[column]],decreasing = T),] )
}


load("data/venice-marriages.Rda")
all.marriages <- marriages.raw[ marriages.raw$wife_familyname_std != '',] # Eliminates those that are not noble

# Use self-loops
all.marriages.sn <- graph.data.frame(data.frame(all.marriages$husband_familyname_std,all.marriages$wife_familyname_std),directed=F)
V(all.marriages.sn)$eigen <-  unname(unlist(eigen_centrality(all.marriages.sn)$vector))
all.m.eigen <- tablify( all.marriages.sn, "eigen", "Family")
all.m.eigen$rank <- 1:nrow(all.m.eigen)
top.ev.all.eigen <- all.m.eigen %>% head(.,10)

# Eliminate self-loops
marriages <- all.marriages[ all.marriages$husband_familyname_std != all.marriages$wife_familyname_std,]
marriages.sn <- graph.data.frame(data.frame(marriages$husband_familyname_std,marriages$wife_familyname_std),directed=F)
V(marriages.sn)$eigen <-  unname(unlist(eigen_centrality(marriages.sn)$vector))
m.eigen <- tablify( marriages.sn, "eigen", "Family")
m.eigen$rank <- 1:nrow(m.eigen)
top.ev.eigen <- m.eigen %>% head(.,10)
@

This dataset was published by Puga and Treffler as support for their paper \cite{colleganza}.It consists of marriages celebrated in the Republic of Venice (and successor polities during the late XVIII and XIX century) where the groom is a noble \footnote{Since the dataset includes some marriages that happened after the fall of the Republic in 1796, the concept of "noble" in this case corresponds to families that were considered noble {\em during the existence of the Republic}; during French and Austrian control, as well as during the brief period of the Republic of San Marco,such nobility titles no longer had any value; however, since they were included in the original dataset there was no good reason to eliminate them.}, registered with the {\em Avvogaria del Comune} of the Republic. Families (called {\em casate} in the original Venetian and Italian) were the political and social unit in the republic \cite{pullan1999three,romano2014limits}, which explains the interest this dataset has for insights into the history of the republic. Nodes in this dataset are, thus, families with nobiliary titles in the Republic of Venice; we eliminated from this dataset those marriages where brides did not belong to any patrician family.\footnote{There were many restrictions to this kind of marriage, but they occurred with regularity, at least until the so-called "Second Serrata" \cite{second:serrata}, during the XV century; in this case, however, we eliminate them because they are irrelevant to the main point of the paper, not having any influence in the EV centrality of a specific node.}.

This dataset has been chosen because it includes a good number of intra-family marriages, as well as because it has been studied extensively by Puga and Treffler in their paper, providing a basis for the comparison of results.
%
<<intra.marriages, echo=F,message=F>>=
library(dplyr)
all.marriages %>% group_by(str_sub(all.marriages$year,1,2)) %>% summarise(intra.marriages=sum(wife_familyname_std==husband_familyname_std),total.marriages = n()) %>% mutate(percentage = 100 * intra.marriages/total.marriages) -> intra.marriages.table

intra.marriages.table %>% rename(century.years="str_sub(all.marriages$year, 1, 2)") -> intra.marriages.table
intra.marriages.table %>% mutate(century = as.roman(as.numeric(century.years)+1)) %>% select(-1) %>% relocate(century,.before=1) -> intra.marriages.table

kable(intra.marriages.table,format="latex",digits=2,caption="Intra-family marriages per century \\protect\\label{tab:century:marriages}", col.names=c("Century","Intra-family marriages","Total marriages","Percentage")) %>% kable_styling(latex_options = c("striped", "hold_position"), full_width = F, position = "left")

marriages.self <- marriages.raw[ marriages.raw$husband_familyname_std == marriages.raw$wife_familyname_std,]
sorted.marriages.self <- marriages.self %>% count(wife_familyname_std, sort=T)
intra.marriages <- unique(marriages.self$wife_familyname_std)

top.intra.marriages <-  sorted.marriages.self %>% head(.,10)

tabled.top.eigen <- data.frame(Family.Intra = top.intra.marriages$wife_familyname_std, Marriages=top.intra.marriages$n)
kable(tabled.top.eigen,
      col.names=c("Family", "#Intra-family marriages" ),
      caption="Ranking of top ten families according to number of intra-family marriages (left). \\protect\\label{tab:top:families}",
      row.names = F, booktabs = T) %>% kable_styling(latex_options = c("striped"))
@

%
The evolution of the absolute  and relative number of intra-family marriages per century is shown in Table \ref{tab:century:marriages}, together with those whose date is not available. These marriages are not evenly distributed per family; the top 10 families according to number of intra-family marriages is shown in Table \ref{tab:top:families}. This is an example where the number of self-loops is not excessive, although it is certainly significant, hovering around a few percentage points per century for an amount of \Sexpr{sum(intra.marriages.table$intra.marriages)} intra-family marriages (self-loops) over \Sexpr{sum(intra.marriages.table$total.marriages)} total.

%

<<centuries, echo=F,message=F>>=

tabled.top.eigen <- data.frame(Family = top.ev.eigen$Family, EV = top.ev.eigen$eigen, Family.Self=top.ev.all.eigen$Family, EV.self = top.ev.all.eigen$eigen)
kable(tabled.top.eigen,
      col.names=c( "Family", "EV","Family","EV + self-loops" ),
      caption="Ranking of top ten families according to EV centrality values, with (right) or without (left) self-loops. \\protect\\label{tab:top:ev}",
      row.names = F, booktabs = T) %>% kable_styling(latex_options = c("striped")) %>% column_spec(2, border_right=T) %>% column_spec(3, border_left = T )

m.ranks <- merge( m.eigen, all.m.eigen, by="Family", suffixes=c(".no.selfloops",".all") )

@

This dataset has been transformed into two different graphs; eliminating self-loops in one and leaving them in the other. In both cases we use undirected edges joining the two families of the partners in every marriage; the edge is weighted with the number of marriages between the families in the nodes; eigenvector centrality has then been computed for the two resulting graphs. A ranking of the top families according to their EV centrality is shown in Table \ref{tab:top:ev}.

Looking at Table \ref{tab:top:families} together with the left hand side of Table \ref{tab:top:ev}, we can see that there seems to be some correlation between the number of intra-family marriages and the EV centrality, even when we do not include it in the computation. Six out of ten families are the same, and the first five: Contarini, Morosini, Corner, Querini and Priuli, also appear in the same order. This might indicate either a common cause for both rankings (size of the family, for instance) or a cause-effect, or even a combination of the two: a family gets bigger since it is wealthy, and is wealthy due to its social capital; high EV centrality implies a lot of influence, and this begets wealth, that literally increases the fitness of the family making it big enough that intra-family marriages become possible and even common. This discussion, however, is beside the main point of this paper, although it should be noted that, in a way, self-loops are {\em factored in} in this specific case since intra-family marriages tend to appear more frequently in families with high EV centrality.

Including self-loops in the computation we see that there are small, but significant, variations: The Dolfins and Giustinians change their order in the ranking, plus the Loredan family is dropped and substituted by the Pisani family\footnote{The Pisani family is certainly more "central" than the Loredan, at least looking at the number of nobles in important offices; \cite{colleganza} mentions them as one of the family with the greatest amount of shares in shipping contracts.}. It can also be seen that the difference between the first and second family in the ranking has doubled, and that, in general, the value of the normalized EV centrality has also decreased; since the EV values are normalized, this simply indicates that the difference between Contarini and the other families has increased, a fact in which, of course, self-loops have had a decisive influence.

<<charts, echo=F, fig.show="hold", fig.pos="h!tb", fig.height=4, message=F, fig.cap="EV centrality considering self-loops (x axis) or not (y axis). The size of the dot and color signal the number of intra-family marriages. \\protect\\label{fig:plots}">>=
library(ggplot2)
library(ggthemes)
library(tidyr)
library(tibble)
all.names <- unique( c( marriages.raw$wife_familyname_std, marriages.raw$husband_familyname_std))
marriages.count <- marriages.raw %>% select(husband_familyname_std,wife_familyname_std) %>% rowid_to_column() %>% pivot_longer(-rowid) %>% group_by(value) %>% summarise(n = n_distinct(rowid)) %>% arrange(desc(n))
marriages.table <- left_join(marriages.count,sorted.marriages.self,by=c("value" = "wife_familyname_std"))
marriages.table$intra.marriages.rate <- marriages.table$n.y / marriages.table$n.x

marriages.summary <- data.frame(family=intra.marriages, EV.with.self=sapply( intra.marriages, function(x) V(all.marriages.sn)[[x]]$eigen ), EV.no.self=sapply( intra.marriages, function(x) V(marriages.sn)[[x]]$eigen ), intra.marriages=sapply( intra.marriages, function(x) sorted.marriages.self[sorted.marriages.self$wife_familyname_std ==x,]$n ))
ggplot(marriages.summary, aes(x=EV.with.self,y=EV.no.self, color=intra.marriages, size=intra.marriages))+geom_point()+geom_abline(intercept=0,slope=1,linetype="dashed",color="red")+scale_x_log10()+scale_y_log10()
@

To better highlight the impact of self-loops, in Figure \ref{fig:plots} we have analyzed the differences between the EV values with ($x$ axis) or without self-loops ($y$ axis) for every node;  it plots the values with self-loops ($x$ axis) vs. those without ($y$ axis) in a log scale, showing all values over the $x=y$ line. The size and color of the dot representing every family is related to the number of intra-marriages; big, lighter blue dots will have the bigger number of self-loops, small, darker ones the lowest.

All dots are placed over the $x=y$ line, indicating that normalized EV values are lower without self-loops. Besides, looking at the colors and sizes, we can see that the smaller the size (number of marriages), the bigger the increase in value; that is, more intra-family marriages make the inclusion of self-loops decrease  EV centrality \emph{less}. However, this is due in this case to the fact that what is actually increased is the difference between the family with the higher EV (the Contarinis) and the rest, so we can look at this result from the other side: the presence of a family with a high value in the diagonal of the connection matrix (i.e. self-loops with a high weight) increases its EV centrality much more than that of the rest of the nodes/families.

<<charts2, echo=F, fig.show="hold",message=F, fig.height=4, fig.cap="Percent increment in normalized EV centrality when including self loops. \\protect\\label{fig:plots2}">>=
marriages.summary$diff <- (marriages.summary$EV.no.self - marriages.summary$EV.with.self)/marriages.summary$EV.no.self
ggplot(marriages.summary, aes(x=intra.marriages,y=diff))+geom_point()+xlab("Number of intra-family marriages")+ylab("% change in normalized EV centrality value")+theme_tufte()
@

To investigate how the number of intra-family marriages impact on the EV centrality, in Figure \ref{fig:plots2}, we plot the number of intra-family weddings and the change in EV centrality. As this chart reveals, as expected, the value of intra-family marriages/self-loops in the computation of EV centrality certainly gives us better insights on the dynamics of the social network.

<<charts3, echo=F, fig.show="hold",message=F, fig.height=4,fig.cap="EV centrality rank reached by families with ($y$ axis) or without ($x$ axis) self loops. \\protect\\label{fig:plots3}">>=
ggplot(m.ranks, aes(x=rank.no.selfloops,y=rank.all))+geom_point()+geom_abline(intercept=0,slope=1,linetype="dashed",color="red")+xlab("Family ranking without self-loops")+ylab("Family ranking with self-loops")+theme_tufte()
@

Finally, Figure \ref{fig:plots3} shows the relationship between the family ranking with ($y$ axis) and without self-loops ($x$ axis). The red line is the $x=y$ line. It shows how changes in rank have a wider span in the mid-ranks, far away from the beginning and from the end. The "first" families (close to (1,1)) barely move a position up or down; hoever, beyond rank 150, there are more changes and they have a bigger impact, with some families moving down several positions, and less moving up a few positions. In general, including self-loops makes has a bigger impact in the mid-ranks, an interesting fact that proves the importance of taking it into account when family networks are researched.

It might have, however, other positive and quantitative impacts in social and historical study. We will again refer to \cite{colleganza} as the baseline study; they show (in their Figure VIII) how EV centrality across a century is a good predictor for centrality in the next century, showing the stability and resilience of the patrician social network in the Republic of Venice. They mention that there is a "good correlation" in this case. We have reproduced this figure in our Figure \ref{fig:correlation}, showing the fit of the linear regression and the correlation coefficient.

<<correlation, echo=F, fig.show="hold", out.width="50%", message=F, fig.cap="Correlation between the EV centrality of Venetian families in the XV century ($x$) and XVI century ($y$). The line indicates the fitted linear model. Left-hand side chart does not include self-loops, right-hand side does. \\protect\\label{fig:correlation}">>=

marriages.XV <- all.marriages[ !is.na(all.marriages$year) & all.marriages$year>=1400 & all.marriages$year < 1500,]
marriages.XVI <- all.marriages[ !is.na(all.marriages$year) & all.marriages$year>=1500 & all.marriages$year < 1600,]
marriages.XV.sn <- graph.data.frame(data.frame(marriages.XV$husband_familyname_std,marriages.XV$wife_familyname_std),directed=F)
V(marriages.XV.sn)$eigen <-  unname(unlist(eigen_centrality(marriages.XV.sn)$vector))
marriages.XVI.sn <- graph.data.frame(data.frame(marriages.XVI$husband_familyname_std,marriages.XVI$wife_familyname_std),directed=F)
V(marriages.XVI.sn)$eigen <-  unname(unlist(eigen_centrality(marriages.XVI.sn)$vector))

# Create a data frame with nodes common in marriages.XVI.sn and marriages.XV.sn and their corresponding eigen centrality

common.nodes <- intersect( V(marriages.XVI.sn)$name, V(marriages.XV.sn)$name )
common.nodes.eigen <- data.frame( Family=common.nodes, XV.eigen=V(marriages.XV.sn)[common.nodes]$eigen, XVI.eigen=V(marriages.XVI.sn)[common.nodes]$eigen )
# ggplot( common.nodes.eigen, aes(x=XV.eigen,y=XVI.eigen)) + geom_point()

marriages.fit <- lm( XVI.eigen ~ XV.eigen, data=common.nodes.eigen )


# Do the same for marriages without self-loops
marriages.XV.no.selfloops <- marriages.XV[ marriages.XV$husband_familyname_std != marriages.XV$wife_familyname_std,]
marriages.XVI.no.selfloops <- marriages.XVI[ marriages.XVI$husband_familyname_std != marriages.XVI$wife_familyname_std,]
marriages.XV.sn.no.selfloops <- graph.data.frame(data.frame(marriages.XV.no.selfloops$husband_familyname_std,marriages.XV.no.selfloops$wife_familyname_std),directed=F)
V(marriages.XV.sn.no.selfloops)$eigen <-  unname(unlist(eigen_centrality(marriages.XV.sn.no.selfloops)$vector))
marriages.XVI.sn.no.selfloops <- graph.data.frame(data.frame(marriages.XVI.no.selfloops$husband_familyname_std,marriages.XVI.no.selfloops$wife_familyname_std),directed=F)
V(marriages.XVI.sn.no.selfloops)$eigen <-  unname(unlist(eigen_centrality(marriages.XVI.sn.no.selfloops)$vector))

# Create a data frame with nodes common in marriages.XVI.sn and marriages.XV.sn and their corresponding eigen centrality

common.nodes.no.selfloops <- intersect( V(marriages.XVI.sn.no.selfloops)$name, V(marriages.XV.sn.no.selfloops)$name )
common.nodes.eigen.no.selfloops <- data.frame( Family=common.nodes.no.selfloops, XV.eigen=V(marriages.XV.sn.no.selfloops)[common.nodes.no.selfloops]$eigen, XVI.eigen=V(marriages.XVI.sn.no.selfloops)[common.nodes.no.selfloops]$eigen )
# ggplot( common.nodes.eigen.no.selfloops, aes(x=XV.eigen,y=XVI.eigen)) + geom_point()

marriages.no.selfloops.fit <- lm( XVI.eigen ~ XV.eigen, data=common.nodes.eigen.no.selfloops )

# plot the fit

ggplot( common.nodes.eigen.no.selfloops, aes(x=XV.eigen,y=XVI.eigen)) + geom_point() + geom_abline(intercept=marriages.no.selfloops.fit$coefficients[1],slope=marriages.no.selfloops.fit$coefficients[2],color="red")

ggplot( common.nodes.eigen, aes(x=XV.eigen,y=XVI.eigen)) + geom_point() + geom_abline(intercept=marriages.fit$coefficients[1],slope=marriages.fit$coefficients[2], color="red")
@

The influence of using the self-loops is clear, with the points representing families with the highest EV seeming {\em closer} to the fit; it should be noted that these are the families that include intra-marriages. But we need to examine numerically this difference.
%
<<table.fit, echo=F, messages=F>>=
# assign residual standard error, multiple r-squared, adjusted r-squared, f-statistic, p-value of marriages.fit to data frame
marriages.fit.df <- data.frame( RSE=summary(marriages.fit)$sigma, R2=summary(marriages.fit)$r.squared, adjR2=summary(marriages.fit)$adj.r.squared, Fstat=summary(marriages.fit)$fstatistic[1], intercept.t = summary(marriages.fit)$coefficients[5], slope.t = summary(marriages.fit)$coefficients[6] )
marriages.fit.df <- rbind(marriages.fit.df,
                          data.frame( RSE=summary(marriages.no.selfloops.fit)$sigma, R2=summary(marriages.no.selfloops.fit)$r.squared, adjR2=summary(marriages.no.selfloops.fit)$adj.r.squared, Fstat=summary(marriages.no.selfloops.fit)$fstatistic[1], intercept.t = summary(marriages.no.selfloops.fit)$coefficients[5], slope.t = summary(marriages.no.selfloops.fit)$coefficients[6] ))
row.names(marriages.fit.df) <- c("With self-loops","Without self-loops")
kable(marriages.fit.df, digits=3, caption="Summary of linear fit of EV centrality for families in the XIV and XV century.\\label{tab:marriagesfit}")
@
%
This we do in Table \ref{tab:marriagesfit}, that shows the fit summary coefficients for the two data sets. The {\sf RSE} column shows the difference of residuals between the model and the data; the top row is smaller, showing a better fit for the EV centralities if self-loops are taken into account. This improvement is due mainly, looking at the two right-most columns, to the improvement in the fit of the intercept with 0 (the t value is better); the effect of this can be observed in Figure \ref{fig:correlation}, which shows how the red line that represents the model seems a bit more centered than the one on the left. The values of R-squared and its adjusted value, as well as the F-value, are slightly better for the model without self-loops; however, they are very similar and very hight in both cases, so this difference is not considered significant.

At any rate, and to the extent that EV centrality in a century is a predictor for EV centrality in the next century, including self-loops in its computation makes it a better fit, even if the models represent data very well in both cases.

\subsection{Freight traffic network}

The freight traffic network is a directed network that includes as nodes different US states, and as edges the amount of freight traffic between them. The data is available from the US Bureau of Transportation Statistics on its page "Freight Flow by State" \footnote{\url{https://www.bts.gov/browse-statistical-products-and-data/state-transportation-statistics/freight-flows-state}}. The data is available for the years 20017-2021.

<<freight, echo=F, messages=F, fig.pos="h!tb",fig.cap="US freight traffic network, with node size proportional to EV centrality (with self loops). Weight value is not represented in this graph.\\protect\\label{fig:usfreight}">>=
# Ditto for US freight traffic
load("data/freight-traffic-agg.RData")
all.freight <- freight.traffic.agg[ freight.traffic.agg$Year == 2021,]
edgelist <- data.frame(V1=all.freight$Origin.State,V2=all.freight$Dest.State,weight=all.freight$sum)
all.freight.sn <- graph_from_data_frame(edgelist)
V(all.freight.sn)$eigen <-  unname(unlist(eigen_centrality(all.freight.sn)$vector))
all.f.eigen <- tablify( all.freight.sn, "eigen", "State")
top.ev.all.f.eigen <- all.f.eigen %>% head(.,10)

# Now without self-loops
freight <- all.freight[ all.freight$Origin.State != all.freight$Dest.State,]
edgelist.noselfloops <- data.frame(V1=freight$Origin.State,V2=freight$Dest.State,weight=freight$sum)
freight.sn <- graph_from_data_frame(edgelist.noselfloops)
V(freight.sn)$eigen <-  unname(unlist(eigen_centrality(freight.sn)$vector))
f.eigen <- tablify( freight.sn, "eigen", "State")
top.ev.f.eigen <- f.eigen %>% head(.,10)

plot(all.freight.sn, vertex.size=V(all.freight.sn)$eigen*15, edge.arrow.size=0.1, edge.curved=0.1, edge.color=rgb(0.8,0.8,0.9,0.5))
@

We will be doing some additional processing on this data. All types of traffic (import, export, domestic) will be added into a single traffic flow; this quantity will be used as a weight in the transportation network. Also, we will be use the data for the year 2021 only; the resulting processed data set is available from the GitHub repository for this paper \url{https://github.com/JJ/redes-venecia}. The resulting network is shown in Figure \ref{fig:usfreight}. This network is totally different from the one analyzed in the previous subsection: all states have internal traffic, so all of them have self loops, as the Figure shows. It is a directed network, since traffic between two states can be asymmetric. The network is very dense, with almost all states connected with all others. Finally, the network structure is quite different, with big differences between the most central states and the rest. Using self loops or not is bound to influence the vision we have of the centrality of the states.

<<freight.rankings, echo=F, fig.show="hold",message=F>>=
tabled.top.f.eigen <- data.frame(State = top.ev.f.eigen$State, EV = top.ev.f.eigen$eigen, State.Self=top.ev.all.f.eigen$State, EV.self = top.ev.all.f.eigen$eigen)
kable(tabled.top.f.eigen,
      col.names=c( "State", "EV","State","EV + self-loops" ),
      caption="Ranking of states in the US freight network according to EV centrality values, with (right) or without (left) self-loops. \\protect\\label{tab:top:ev:f}",
      row.names = F, booktabs = T) %>% kable_styling(latex_options = c("striped")) %>% column_spec(2, border_right=T) %>% column_spec(3, border_left = T )
@

We show the differences in the first positions in the ranking according to EV centrality in \ref{tab:top:ev:f}. As was the case for the Venice matrimonial network, the first positions do not change, the top 3 in this case. All others do, however, as does the quantitative difference between the first and the rest of the positions; using self-loops highlights the differences in EV centrality, and thus influence, between the first and the rest of the states, as well as the differences among themselves.

<<freight.chart, echo=F, fig.show="hold",message=F, fig.height=4, fig.pos="h!tb", fig.cap="Relationship between EV centrality with or without self-loops for the US freight network.\\protect\\label{fig:freight:chart}">>=
freight.ev.df <- data.frame( State = V(freight.sn)$name, EV.self = V(all.freight.sn)$eigen, EV = V(freight.sn)$eigen)
ggplot(freight.ev.df, aes(x=EV.self, y=EV)) + geom_point() + geom_abline(intercept=0, slope=1, color="red") + labs(x="EV centrality with self-loops", y="EV centrality without self-loops")+theme_bw()
@

The stark change in values is shown in Figure \ref{fig:freight:chart}, where we plot the EV centrality values with and without self-loops for all states (and the District of Columbia. Except for the two top values (Texad and California), when self-loops are considered the value of EV centrality drops below (roughly) 0.05, with changes whose value is obviously decreasing with the initial value (without self-loops).

<<freight.diff, echo=F, fig.show="hold",message=F, fig.pos="h!tb",fig.height=4,  fig.cap="Change in EV centrality vs. value of intra-state traffic.\\protect\\label{fig:freight:diff}">>=
intra.traffic <- all.freight[ all.freight$Origin.State == all.freight$Dest.State,]$sum
freight.diff.df <- data.frame( State = V(all.freight.sn)$name, diff = (V(freight.sn)$eigen - V(all.freight.sn)$eigen)/V(freight.sn)$eigen, intra.traffic = intra.traffic)
ggplot(freight.diff.df, aes(x=intra.traffic, y=diff)) + geom_point() + labs(y="Difference in EV centrality", x="Intra-state traffic")+theme_bw()
@

Figure \ref{fig:freight:diff} shows the relationship between the decrease in (normalized) EV centrality when self-loops are considered and the value of intra-state traffic. In general, the more intra-state traffic, the bigger the difference in EV centrality. This occurs in a scale that is totally different to that shown in Figure \ref{fig:plots2}, although it is remarkable to note that changes to in the same direction, that is, a decrease in EV centrality, and also in general a higher self-connection weight will imply less change in percentage. This clearly indicates a correlation between the two measures, but it is not clear if it is a causal relationship or not, and discussing it is beyond the point of the paper.

\section{Conclusions}

The main research question we asked in the introduction was whether it was worth the while to take into account self-loops whenever possible in the computation of EV centrality. Using real-world networks, we have shown that, in general, the answer is yes. In the case of the Venetian matrimonial network it helps EV become a better predictor of the social status of the families involved, and in the case of the US freight network highlights the differences between the position in the network of states, boosting the difference between Texas, California, Illinois and the rest of the states, and boosting Michigan and Louisiana over New York and New Jersey given the importance of internal freight in these two states. In both cases, the differences are not only quantitative, but also qualitative, as the ranking of the most important nodes changes when self-loops are included.

The direction and quantity of those changes is very similar in both networks examined. Complex networks reach a state that is the consequence of many different internal and external processes, and in general, the same processes that make a node in the network reach a high status will produce a high number of internal connections, that is, self-loops with a high internal weight. This makes the inclusion of self-loops {\em increase} the differences in status between high-ranked members, but also produce changes in ranking that are more pronounced in the case of mid-ranking members, as observed in the case of the Venetian marital network.

At any rate, the fact that we have observed very similar phenomena in two very different networks (sparse and dense, directed and undirected, with a low or total self-connection rate) probably indicates that the inclusion of self-loops in EV computation has more importance than that it has been traditionally given, and thus the recommendation to include self-loops in the computation of EV centrality should also be general.

A immediate future line of work would of course try to test combinations of networks, possibly including synthetic ones, with different combinations of the above mentioned properties to actually characterize when and if the inclusion of self-loops is essential, merely interesting, or simply irrelevant. It can be argued that whenever they appear in a dataset they should be used, but to the extent that the physical interpretation of self-loops and how their data is collected is fundamentally different from external connections, including them or not is clearly an issue that should be researched and clarified in a case by case basis.

This probably indicates the need for inclusion of self-loops in other centrality measures, such as page-rank or betweenness centrality, would help us understand better social networks where those measurements explain better its dynamics; however, this will need a modification of the algorithms used to compute them, which is left as a future line of work. In order to be comprehensive, too, it would be interesting to see the relationship between the slope of the model shown in Figure \ref{fig:charts} and the relationship between the number of self-loops for all actors involved. Finally, investigating other social networks with the same characteristics would help us generalize these results and thus recommend to \emph{never} eliminate self-loops in the analysis of social networks where they exist.

The most important line of work, however, is to check against some external measurement (number and importance of positions reached by a family, for instance, in line with \cite{Telek2017MarryingTR}) which version of the EV centrality would be a better match, thus proving that self-loops/diagonal values in the connection matrix go beyond mere mathematical artifacts to have a precise and grounded interpretation; once that is proved, it would pave the way to an extension of the employment of self-loops in some way in other centrality values such as betweenness centrality.

Finally, we should note that this paper and the data used in it have been developed following the principles of Agile science \cite{DBLP:journals/corr/abs-2104-12545} and its development can be observed in the repository \url{https://github.com/JJ/redes-venecia} together with the data used in it, making it fully reproducible using the same software. It is of course free software, and released under the terms of the GNU General Public License v3.0.

\section*{Acknowledgements}

This work is supported by the Ministerio espa\~{n}ol de Econom\'{\i}a y
Competitividad (Spanish Ministry of Competitivity and Economy) under project
PID2020-115570GB-C22 (DemocratAI::UGR).

\bibliographystyle{splncs04}
\bibliography{venice,self-loops,geneura}

\end{document}
